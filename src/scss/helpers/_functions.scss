@function strip-units($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

//Loops throw previous font sizes
@function get_previous_font_size($font_sizes, $font_size_key, $breakpoint) {
  $fontSize: map-get($font_sizes, $font_size_key);
  $currentIndex: index(map-keys($fontSize), $breakpoint);
  $previousIndex: $currentIndex - 1;
  $previous_fontSize_bp: nth(nth($fontSize, $previousIndex), 1);
  $previous_fontSize_value: nth(nth($fontSize, $previousIndex), 2);

  //Check if previous is still == previous
  @if $previous_fontSize_value == "previous" {
    @return get_previous_font_size(
      $font_sizes,
      $font_size_key,
      $previous_fontSize_bp
    );
  } @else {
    //Get the New value from breakpoint
    // @return $previous_fontSize_bp;
    @return get_font_size_by_breakpoint(
      $font_sizes,
      $font_size_key,
      $previous_fontSize_bp
    );
  }
}

//Return current.unit or percentage-of-default.unit
@function get_font_size_by_unit($value, $newValue) {
  $newValue_unit: unit($newValue);
  $newValue_unitless: strip-units($newValue);
  @if $newValue_unit == "%" {
    @return $newValue_unitless * map-get($value, "default") / 100;
  } @else {
    @return $newValue;
  }
}

//Returns the font-size of a desired font_key PER breakpoint
@function get_font_size_by_breakpoint(
  $font_sizes,
  $font_size_key,
  $breakpoint: "default"
) {
  // Check unit
  $fontSizeMap: map-get($font_sizes, $font_size_key);
  $value: map-get($fontSizeMap, "default");
  $newValue: map-get($fontSizeMap, $breakpoint);

  // Check new value type
  @if $newValue == "default" {
    //Equals to default Value
    @return $value;
  } @else if $newValue == "previous" {
    //Get Previous Font size
    @return get_previous_font_size($font_sizes, $font_size_key, $breakpoint);
  } @else if type-of($newValue) == string {
    //Equals to breakpoint
    $getFromThisBreakPoint: map-get($fontSizeMap, $breakpoint);
    //Get the New value from breakpoint
    $newValue: map-get($fontSizeMap, $getFromThisBreakPoint);
    @if $newValue == "previous" {
      //Get Previous Font size
      @return get_previous_font_size($font_sizes, $font_size_key, $breakpoint);
    } @else if $newValue == "default" {
      @return $value;
    }

    @return get_font_size_by_unit($fontSizeMap, $newValue);
  } @else {
    //New Value
    @return get_font_size_by_unit($fontSizeMap, $newValue);
  }
}

//Return defualt font size per default breakpoint
@function get_font_size($font_sizes, $font_size_key: "default") {
  $fontSizeMap: map-get($font_sizes, $font_size_key);
  $fontSizeValue: map-get($fontSizeMap, "default");

  @return $fontSizeValue;
}
